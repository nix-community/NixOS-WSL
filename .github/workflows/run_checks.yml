name: Checks

on:
  workflow_call: {}

jobs:
  prepare:
    name: Find Checks üîç
    runs-on: ubuntu-latest
    outputs:
      checks: ${{ steps.checks.outputs.checks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix ‚ùÑÔ∏è
        uses: ./.github/actions/install-nix

      - name: Find Checks üîç
        id: checks
        run: |
          nix-instantiate --json --eval --strict -E 'with builtins; attrNames (getFlake (toString ./.)).checks.${currentSystem}' | perl -pe 's|(.*)|checks=\1|' >>$GITHUB_OUTPUT

  checks:
    name: Flake Check ‚ùÑÔ∏è
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        check: ${{ fromJSON(needs.prepare.outputs.checks) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix ‚ùÑÔ∏è
        uses: ./.github/actions/install-nix

      - name: Run Check üìã
        run: |
          nix build -L --impure --expr "with builtins; (getFlake (toString ./.)).checks.\${currentSystem}.${{ matrix.check }}"

  resharper:
    name: Check .NET üìã
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET üß∞
        id: setup-dotnet
        uses: ./.github/actions/setup-dotnet

      - name: Install ReSharper Command Line Tools üß∞
        shell: pwsh
        run: dotnet tool install -g JetBrains.ReSharper.GlobalTools

      - name: Create dummy tarball
        shell: pwsh
        run: echo $null >> Launcher\Launcher-Appx\nixos-wsl.tar.gz

      - name: Run InspectCode üîç
        shell: pwsh
        run: jb inspectcode --build -f=sarif -o="report.json" .\Launcher\Launcher.sln

      - name: Print Report üìã
        shell: pwsh
        run: |
          $(cat .\report.json | ConvertFrom-Json).runs[0].results | % {
            $level = "warning"
            if ($_.level -eq "note") { $level = "notice" }
            $loc = $_.locations[0].physicalLocation
            Write-Output "::${level} file=Launcher/$($loc.artifactLocation.uri),line=$($loc.region.startLine),endLine=$($loc.region.endLine),title=$($_.ruleId)::$($_.message.text)"
          }
